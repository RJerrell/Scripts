<# 

The report generated by this code lists each
 - Task Card Number
 - Task Card DMC
 - 1:~ dmRefs
 - WorkArea
 - Threshhold
 - Repeat

 #>
cls
$sd = Get-Date
$ErrorActionPreference = "Stop"
$error.Clear()
$env:PSModulePath = "C:\Program Files (x86)\PowerShell Community Extensions\Pscx3\;C:\Windows\system32\WindowsPowerShell\v1.0\Modules\;c:\KC46 Staging\Scripts\Modules;"

Import-Module -Name "KC46Common" -Verbose -Force
Import-Module -Name "PSExcel" -Verbose -Force 
# *****************************************************************************************************
# Include all common variables
. 'C:\KC46 Staging\Scripts\Common\KC46CommonVariables.ps1'

Add-Type -Path "C:\KC46\S1000D\Deployments\S1000D_Parser\Parser.dll" -Verbose
$parser = new-object -TypeName S1000D.DataModule_401
$tcList =@()

$path2Cards = "F:\KC46 Staging\Production\Manuals\TC\S1000D\SDLLIVE"

$cards = gci -Path $path2Cards -Filter DMC*.XML |Sort-Object

foreach ($card in $cards)
{
    # Load the task card
    $parser.ParseDM($card.FullName)

    #Variables
    $tcNumber =""
    $tcDMC = $card.Name

    #Load the variables if there are values to load
    $tcTechName = $parser.TechName
    $tcNumberArray = $tcTechName.Split("-")
    $tcNumber = $tcNumberArray[0] + "-" + $tcNumberArray[1] + "-" + $tcNumberArray[2] + "-" + $tcNumberArray[3]
    
    # Table body
    $tbody = $parser.Content.description.table.tgroup.tbody
    $tcThreshold = $tbody.row[0].entry[3].InnerText.Replace("THRESHOLD", "").Trim()
    $tcWorkArea = $tbody.row[0].entry[1].InnerText.Replace("WORK AREA", "").Trim()
    $tcRepeat = $tbody.row[0].entry[4].InnerText.Replace("REPEAT", "").Replace("`n","").Trim()

    $refs = $parser.Content.refs
    foreach ($ref in $refs.dmRef)
    {
        $Ref_Dmc1 = $ref.OuterXml # OuterXml of the dmRef
        $Ref_Dmc2 = Get-FilenameFromDMRef -dmRef $ref -filePref "DMC-" # DMC string like a file name
        $Ref_Dm_TechName = $ref.title

        $tcList += New-Object -TypeName PSObject -Property @{                
            TC_Number = $tcNumber;
            TC_DMC = $tcDMC;
            Ref_Dm_TechName=$Ref_Dm_TechName;     
            Ref_Xml =$Ref_Dmc1 ;
            Ref_Dmc = $Ref_Dmc2;
            WorkArea=$tcWorkArea;
            Threshold = $tcThreshold;
            Repeat = $tcRepeat;
        } | Select TC_Number,TC_DMC,Ref_Dm_TechName,Ref_Xml,Ref_Dmc,WorkArea,Threshold,Repeat
    }

}
$exportFolder = "C:\KC46 Staging\Scripts\Report Generators\Outputs\TaskCards"
$rptTimeStamp = $sd.Date.Year.ToString() + $sd.Month.ToString()+ $sd.Day.ToString() + " " +  $sd.Hour.ToString() + $sd.Minute.ToString() + $sd.Millisecond.ToString()
$reportName = "KC46 - Task Card Inventory - " + $rptTimeStamp + ".xlsx"
$reportName
if(! (Get-FileExistance -fullName $exportFolder))
{
    md $exportFolder
}

$tcList.GetEnumerator()  | Sort-Object -Property $prop1 |Export-XLSX -Path "$exportFolder\$reportName" -Header TC_Number,TC_DMC,Ref_Dm_TechName,Ref_Xml,Ref_Dmc,WorkArea,Threshold,Repeat -WorksheetName "Task Card Inventory"

# *****************************************************************************************************
$ed = Get-Date
$x = $ed.Subtract($sd)
"Total Time to complete:`t" + $x.Hours + ":" + $x.Minutes + ":" +  $x.Seconds  + ":" +  $x.Milliseconds
"Process completed"